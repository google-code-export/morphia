#summary Describes how to annotate fields with embedded objects.

= Embedding Objects =

We're often dealing with an object structure that does not just have a flat list of fields, but rather a tree of objects. For example, look at the following classes:

{{{
public class Hotel {

    private String name;
    private int stars;
    private Address address;

    // ... getters and setters
}
}}}

where the Address class looks like this:

{{{
public class Address {

    private String street;
    private String city;
    private String postCode;
    private String country;

    // ... getters and setters
}
}}}

As a rule of thumb, you should @Embedded for objects that are dependent on the parent object (and therefore have no life outside it), and are not shared between objects. If you need to reference another collection object, look at {{{@Reference}}}, or storing a {{{Key}}} instead.

We just annotate the above classes with @Property and @Embedded:

{{{
@Entity
public class Hotel {

    @Id
    private String id;

    private String name;
    private int stars;

    @Embedded
    private Address address;

    // ... getters and setters
}

...

import com.google.code.morphia.annotations.Embedded;

@Embedded
public class Address {

    private String street;
    private String city;
    private String postCode;
    private String country;

    // ... getters and setters
}
}}}

As you can see here, _classes used solely as embedded objects should not use @Id_.

By default, Morphia uses the field name as the value name in Mongo. This can be overridden by specifying a name on the @Embedded annotation:

{{{
    @Embedded("blog_comments")
    private List<Comment> comments;
}}}