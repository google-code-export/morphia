#summary Define your Entity

= Entity Annotation =

If you want to store your class instance in Mongo via Morphia, the first thing you need to do is annotate your class as an @Entity:

{{{
import com.google.code.morphia.annotations.Entity;

@Entity
public class Hotel {
...
}
}}}

You can also optionally set a name for your MongoDB {{{DBCollection}}} name.
You will also need a (no-args) default constructor.

{{{
import com.google.code.morphia.annotations.Entity;

@Entity("hotels")
public class Hotel {
...
    public Hotel() {
    }
...
}
}}}

Note that your default constructor does not need to be public, it can also be protected or private.

Classes annotated with {{{@Entity}}} require unique {{{@Id}}} values; these values are stored in the MongoDB "_id" field, which has a unique index requirement. The Hotel class above would have:

{{{
@Entity
public class Hotel {

    @Id
    private String id;
...
}
}}}

Mongo will generate the ID for your new objects, so you don't need to worry about that. It will be stored as an {{{ObjectId}}}; If you use any other type than String or ObjectId you must set the value yourself.

If your class is embedded, then we use the @Embedded annotation instead. For example, the Hotel class above might have an Address. The Address would be an inseparable part of the Hotel, would not have its own ID, and would not be stored in a separate Mongo collection. In this case we would annotate the Address class as @Embedded:

{{{
import com.google.code.morphia.annotations.Entity;
import com.google.code.morphia.annotations.Embedded;

@Entity
public class Hotel {
    ...
    @Id
    private String id;

    @Embedded
    private Address address;
    ...
}

...

@Embedded
public class Address {
    ...
}
}}}

As you can see, classes with @Embedded annotation do not need an {{{@Id}}}. This is because they always be included in another class.

Next, let's look at how to annotate the fields of the class.