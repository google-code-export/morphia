#summary A quick 2 minute intro to Morphia.
#labels Featured
= So you want to store your POJOs in MongoDB? =

Morphia makes that very easy. Here's what you need to do.

== Annotate your Java classes ==

Let's imagine we have the following simple classes:

{{{
public class Hotel {

    private String name;
    private int stars;
    private Address address;

    // ... getters and setters
}
}}}

and

{{{
public class Address {

    private String street;
    private String city;
    private String postCode;
    private String country;

    // ... getters and setters
}
}}}

We want to save instances of these objects to MongoDB. All we need to do is add the Morphia annotations to the class fields we want to persist:

{{{
import com.google.code.morphia.annotations.CollectionName;
import com.google.code.morphia.annotations.Entity;
import com.google.code.morphia.annotations.Embedded;
import com.google.code.morphia.annotations.Id;
import com.google.code.morphia.annotations.Property;
import org.bson.types.ObjectId;

@Entity
public class Hotel {

    @Id private ObjectId id;

    private String name;
    private int stars;

    @Embedded
    private Address address;

    // ... getters and setters
}
}}}

and

{{{
import com.google.code.morphia.annotations.Embedded;

@Embedded
public class Address {

    private String street;
    private String city;
    private String postCode;
    private String country;

    // ... getters and setters
}
}}}

We've annotated Hotel with @Entity, and Address with @Embedded since the Address is an object dependent on Hotel (and does not have a life outside the Hotel).

You can see that all the basic fields are automatically mapped by Morphia. If you want to exclude a field, just annotate it with @Transient.

Also note that we had to add a new field "id" to our Hotel class. The "id" value can be any persist-able type; like an int, uuid, or other object. If you want an auto-generated value just declare it as an {{{ObjectId}}}. If you don't use an {{{ObjectId}}} you must set the value before saving.

== Prepare the framework ==

Next, we create an instance of Morphia, and map the classes we want to use:

{{{
import com.google.code.morphia.Morphia;
...
Morphia morphia = new Morphia(new Mongo());
morphia.map(Hotel.class).map(Address.class);
Datastore ds = morphia.createDatastore("my_database");
...
}}}

Mapping the classes at the beginning of your application is a good practice. It allows the system to validate your classes and prepare for storing the data, and retrieving it. You can also do a few other that are only required once at this time.  

== Persisting POJOs ==

Now we can use the Datastore instance to save classes with MongoDB. To save a Hotel in Mongo:

{{{
Hotel hotel = new Hotel();
hotel.setName("My Hotel");
hotel.setStars(4);

Address address = new Address();
address.setStreet("123 Some street");
address.setCity("Some city");
address.setPostCode("123 456");
address.setCountry("Some country");

Morphia morphia = ...;
Datastore ds = morphia.createDatastore("testDB");

// Save the POJO
ds.save(hotel);

}}}

Loading a Hotel from Mongo is also simple:

{{{
Morphia morphia = ...;
Datastore ds = morphia.createDatastore("testDB");

String hotelId = ...; // the ID of the hotel we want to load

// and then map it to our Hotel object
Hotel hotel = ds.get(Hotel.class, hotelId);

}}}

Using a query is just as simple as loading Hotel:

{{{
Morphia morphia = ...;
Datastore ds = morphia.createDatastore("testDB");

// it is easy to get four-star hotels.
List<Hotel> fourStarHotels = ds.find(Hotel.class, "stars >=", 4).asList();
//or
fourStarHotels = ds.find(Hotel.class).field("stars").greaterThenEq(4).asList();

}}}


== Data Access Object (DAO) Support ==

To take advantage of the basic Morphia DAO support:

{{{
import com.google.code.morphia.Morphia;
import com.google.code.morphia.dao.DAO;
import com.mongodb.DBCollection;
import com.mongodb.Mongo;

public class HotelDAO extends BasicDAO<Hotel, String> {
    public HotelDAO(Morphia morphia, Mongo mongo ) {
        super(mongo, morphia, "myDB");
    }
}

HotelDAO hDAO = ...

hDAO.save(new Hotel(...));
}}}

In a web application environment, we would probably inject the Mongo, Morphia, and Datastore instances into a DAO/Service, and then inject the that into a controller, so the controller would never directly deal with Mongo or Morphia.