#summary The motivation behind Morphia.

= Motivation =

The motivation for this project is multi-faceted becuase there have been many contributors which have all focussed on different features and working from a different vision.

Generally the motivation has come from wanted to work with Plain-Old-Java-Objects (POJO) and remove some of the knowledge needed to store data while providing more fluent and "javaesk" interface to data access.

The basic java driver provides a view of the data as one of nested {{{Map<String, Object>}}} with very dynamic (and less POJO) view of data. It provides a very malleable and consistent view of how to perform queries which is somewhat complicated, but can be very complete. The goal of this project is to keep all that control and power while making it much easier to integrate with basic java principles. 

The basic goals come down to this:
  * Type-safe: we deal with POJOs (in/out of mongodb)
  * Annotation based configuration (less code)
  * Easy to use [Query] interface (intuitive)
  * Flexibility to map to your domain objects (reduce DTO/DMOs)
  * Fast enough never to give up on the items above to change your programming style

For example, if we're storing information about hotels, we're likely to create a Hotel class, and add fields like title, description, address, rating, pictures, etc. 

It is easy to instantiate Java classes and add data to the fields, but when it comes to actually persisting the data we usually map the object to an external data source (such as database, xml files, etc.). This often involves a lot of error prone boiler plate code (e.g. mapping from JDBC result set, XML elements, etc.). The same applies, of course, when we need to map the Java object to the external data source: more boiler plate code.

We already have good object mapping frameworks for relational databases and JDBC, of JPA and Hibernate. The vision of Morphia is to provide something similar for MongoDB (http://mongodb.org).