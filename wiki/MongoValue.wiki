#summary One-sentence summary of this page.

= Annotating primitive and basic type fields =

To store primitive and basic type fields in Mongo, you just add the @MongoValue annotation:

{{{
import com.google.code.morphia.annotations.MongoValue;
...
@MongoValue
private int myInt;
@MongoValue
private Date myDate;
@MongoValue
private List<String> myStrings;
...
}}}

The following list defines what types can currently be persisted using @MongoValue:

 * int and Integer
 * double and Double
 * boolean and Boolean
 * long and Long
 * enum (stored as String in Mongo)
 * String
 * java.util.Date
 * java.util.Locale

As we showed in the example above, Morphia can also store a java.util.List, as long as the List is parameterized with one of the Java types in the table above.

By default, Morphia uses the field name as the value name in Mongo. This can be overridden by specifying a name on the @MongoValue annotation:

{{{
import com.google.code.morphia.annotations.MongoValue;
...
@MongoValue(name = "my_integer")
private int myInt;
...
}}}

Finally, when annotating a parameterized java.util.List of primitive/basic types, Morphia will by default use java.util.ArrayList. If you need another implementation, you can override this by specifying listClass on the @MongoValue annotation:

{{{
import com.google.code.morphia.annotations.MongoValue;
...
@MongoValue(listClass = java.util.Vector.class)
private List<String> myValues;
...
}}}