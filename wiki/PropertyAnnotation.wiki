#summary Annotating primitive and basic type fields.

= Annotating primitive and basic type fields =

To store primitive and basic type fields in Mongo, you don't need any annotations:

{{{
...
private int myInt;
private Date myDate;
private List<String> myStrings;
...
}}}

By default, Morphia will try to map all the supported basic and primitive types to/from Mongo.

The following list defines what basic an primitive types can currently be persisted:

 * int and Integer
 * double and Double
 * boolean and Boolean
 * long and Long
 * enum (stored as String in Mongo)
 * String
 * java.util.Date
 * java.util.Locale

As we showed in the example above, Morphia can also store a java.util.List, java.util.Set, and java.util.Map collections.

If you want to exclude a field from being mapped to Mongo, use the @Transient annotation:

{{{
import com.google.code.morphia.annotations.Transient;
...
@Transient
private int myTransientInt;
...
}}}

By default, Morphia uses the field name as the value name in Mongo. This can be overridden by using the @Property annotation, and specifying a name:

{{{
import com.google.code.morphia.annotations.Property;
...
@Property(name = "my_integer")
private int myInt;
...
}}}